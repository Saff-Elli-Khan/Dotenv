<?php

namespace Dotenv\Dotenv;

use Dotenv\DotenvExceptions\DotenvExceptions;
use Dotenv\DotenvOptions\DotenvOptions;
use Dotenv\DotenvWriter\DotenvWriter;

class Dotenv
{
    private
        $loaded = false,
        $content = NULL,
        $resolve = false,
        $exceptions = true,
        $parsedContent = [],
        $variables = [];
    public
        $file_path = NULL,
        $error_data = [],
        $error_message = NULL,
        $error_meta = NULL;

    public function __construct(string $file_path, bool $resolve = false, bool $exceptions = true)
    {
        $this->resolve = $resolve;
        $this->exceptions = $exceptions;
        if (!file_exists($file_path)) {
            if (!$this->resolve) {
                return $this->error("The Given File Not Been Found!");
            } else {
                $content = "#Generated By Dotenv Manager";
                $fp = @fopen($file_path, "wb");
                if ($fp === FALSE) {
                    return $this->error("Unable To Resolve The ENV File!");
                }
                @fwrite($fp, $content);
                fclose($fp);
            }
        } else {
            $content = @file_get_contents($file_path, true);
            if ($content === FALSE) {
                return $this->error("We Are Unable To Get ENV Content!");
            }
        }
        $this->file_path = $file_path;
        $this->content = $content;
        return $this;
    }

    public function error(string $message, $meta = NULL)
    {
        $this->error_message = $message;
        $this->error_meta = $meta;
        $this->error_data[] = ["message" => $message, "meta" => $meta];
        if ($this->exceptions) {
            throw new DotenvExceptions($message);
        } else {
            return false;
        }
    }

    public function content()
    {
        if ($this->loaded) {
            return $this->content;
        } else {
            return $this->error("Dotenv Is Not Loaded Yet!");
        }
    }

    public function parsedContent()
    {
        if ($this->loaded) {
            return $this->parsedContent;
        } else {
            return $this->error("Dotenv Is Not Loaded Yet!");
        }
    }

    public function variables()
    {
        if ($this->loaded) {
            return $this->variables;
        } else {
            return $this->error("Dotenv Is Not Loaded Yet!");
        }
    }

    public function get(string $variableName)
    {
        if (isset($_ENV[$variableName])) {
            return $_ENV[$variableName];
        } else {
            return $this->error("Variable ($variableName) Not Found!");
        }
    }

    private function parse()
    {
        if (!empty($this->content)) {
            $split_lines = explode("\n", $this->content);
            foreach ($split_lines as $line) {
                $esc_comments = explode("#", $line);
                if (!empty(trim($esc_comments[0]))) {
                    $split_line = explode("=", $esc_comments[0]);
                    $this->parsedContent[trim($split_line[0])] = (isset($split_line[1])) ? trim($split_line[1]) : NULL;
                    $this->variables[trim($split_line[0])] = (isset($split_line[1])) ? trim($split_line[1]) : NULL;
                }
                if (isset($esc_comments[1]) && !empty($esc_comments[1]))
                    $this->parsedContent[$esc_comments[1]] = NULL;
            }
            return $this;
        } else {
            return $this->error("No Content Available!");
        }
    }

    public function options()
    {
        if ($this->loaded) {
            return new DotenvOptions($this);
        } else {
            return $this->error("Dotenv Is Not Loaded Yet!");
        }
    }

    public function load()
    {
        if ($this->parse()) {
            foreach ($this->variables as $key => $value) {
                putenv("$key=$value");
            }
            $_ENV = $this->variables;
            $this->loaded = true;
            return $this;
        } else {
            return $this->error("Something Happened Wrong!");
        }
    }

    public function addVariables(array $variables, string $comment = NULL)
    {
        if ($comment !== NULL) {
            $this->parsedContent[$comment] = NULL;
        }
        if (empty($variables)) {
            $this->error("Empty Data Cannot Be Added!");
        } else {
            foreach ($variables as $key => $value) {
                if (is_array($value)) {
                    $value = json_encode($value);
                }
                $this->parsedContent[$key] = $value;
            }
            return new DotenvWriter($this);
        }
    }

    public function removeVariables(array $variables)
    {
        if (empty($variables)) {
            $this->error("Invalid Request (Array Is Empty)!");
        } else {
            foreach ($variables as $var) {
                unset($this->parsedContent[$var]);
            }
            return new DotenvWriter($this);
        }
    }
}
